/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __HELLO_VERIFIER_BPF_SKEL_H__
#define __HELLO_VERIFIER_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct hello_verifier_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *my_config;
		struct bpf_map *output;
		struct bpf_map *data;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *kprobe_exec;
		struct bpf_program *xdp_hello;
	} progs;
	struct {
		struct bpf_link *kprobe_exec;
		struct bpf_link *xdp_hello;
	} links;
	struct hello_verifier_bpf__data {
		int c;
		char message[12];
	} *data;

#ifdef __cplusplus
	static inline struct hello_verifier_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct hello_verifier_bpf *open_and_load();
	static inline int load(struct hello_verifier_bpf *skel);
	static inline int attach(struct hello_verifier_bpf *skel);
	static inline void detach(struct hello_verifier_bpf *skel);
	static inline void destroy(struct hello_verifier_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
hello_verifier_bpf__destroy(struct hello_verifier_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
hello_verifier_bpf__create_skeleton(struct hello_verifier_bpf *obj);

static inline struct hello_verifier_bpf *
hello_verifier_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct hello_verifier_bpf *obj;
	int err;

	obj = (struct hello_verifier_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = hello_verifier_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	hello_verifier_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct hello_verifier_bpf *
hello_verifier_bpf__open(void)
{
	return hello_verifier_bpf__open_opts(NULL);
}

static inline int
hello_verifier_bpf__load(struct hello_verifier_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct hello_verifier_bpf *
hello_verifier_bpf__open_and_load(void)
{
	struct hello_verifier_bpf *obj;
	int err;

	obj = hello_verifier_bpf__open();
	if (!obj)
		return NULL;
	err = hello_verifier_bpf__load(obj);
	if (err) {
		hello_verifier_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
hello_verifier_bpf__attach(struct hello_verifier_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
hello_verifier_bpf__detach(struct hello_verifier_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *hello_verifier_bpf__elf_bytes(size_t *sz);

static inline int
hello_verifier_bpf__create_skeleton(struct hello_verifier_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "hello_verifier_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "my_config";
	map->map = &obj->maps.my_config;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 1 * s->map_skel_sz);
	map->name = "output";
	map->map = &obj->maps.output;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 2 * s->map_skel_sz);
	map->name = "hello_ve.data";
	map->map = &obj->maps.data;
	map->mmaped = (void **)&obj->data;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 3 * s->map_skel_sz);
	map->name = "hello_ve.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "kprobe_exec";
	s->progs[0].prog = &obj->progs.kprobe_exec;
	s->progs[0].link = &obj->links.kprobe_exec;

	s->progs[1].name = "xdp_hello";
	s->progs[1].prog = &obj->progs.xdp_hello;
	s->progs[1].link = &obj->links.xdp_hello;

	s->data = hello_verifier_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *hello_verifier_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd0\x14\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x11\0\
\x01\0\xbf\x16\0\0\0\0\0\0\x18\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x71\0\0\0\0\
\0\0\xbf\x12\0\0\0\0\0\0\x07\x02\0\0\x01\0\0\0\x63\x27\0\0\0\0\0\0\xb7\x02\0\0\
\0\0\0\0\x63\x2a\xf8\xff\0\0\0\0\x63\x2a\xf4\xff\0\0\0\0\x63\x2a\xf0\xff\0\0\0\
\0\x63\x2a\xec\xff\0\0\0\0\x63\x2a\xe8\xff\0\0\0\0\x63\x2a\xe4\xff\0\0\0\0\x63\
\x2a\xfc\xff\0\0\0\0\x63\x1a\xe0\xff\0\0\0\0\x85\0\0\0\x0e\0\0\0\x63\x0a\xd8\
\xff\0\0\0\0\x85\0\0\0\x0f\0\0\0\x63\x0a\xdc\xff\0\0\0\0\x67\0\0\0\x20\0\0\0\
\x77\0\0\0\x20\0\0\0\x7b\x0a\xd0\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\
\xd0\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x18\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\x09\0\0\0\0\0\x71\x03\0\0\0\0\0\0\x67\
\x03\0\0\x38\0\0\0\xc7\x03\0\0\x38\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x03\0\0\0\xbf\x08\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x83\0\0\0\0\
\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf4\xff\xff\xff\xb7\x02\0\0\x0c\0\0\0\x85\
\0\0\0\x71\0\0\0\x61\x71\0\0\0\0\0\0\x25\x01\x18\0\x0b\0\0\0\x18\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x0f\x12\0\0\0\0\0\0\x71\x23\0\0\0\0\0\0\x67\x03\0\0\x38\0\0\
\0\xc7\x03\0\0\x38\0\0\0\x18\x01\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x03\
\0\0\0\x85\0\0\0\x06\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\
\0\0\x25\x01\x0a\0\x0b\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xd8\xff\xff\xff\
\x0f\x12\0\0\0\0\0\0\x71\x23\x1c\0\0\0\0\0\x67\x03\0\0\x38\0\0\0\xc7\x03\0\0\
\x38\0\0\0\x18\x01\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x03\0\0\0\x85\0\0\
\0\x06\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xe4\xff\xff\xff\xb7\x02\0\0\x10\0\
\0\0\x85\0\0\0\x10\0\0\0\xbf\xa4\0\0\0\0\0\0\x07\x04\0\0\xd8\xff\xff\xff\xbf\
\x61\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x03\0\0\xff\xff\xff\
\xff\0\0\0\0\0\0\0\0\xb7\x05\0\0\x28\0\0\0\x85\0\0\0\x19\0\0\0\xb7\0\0\0\0\0\0\
\0\x95\0\0\0\0\0\0\0\x61\x14\x04\0\0\0\0\0\x61\x13\0\0\0\0\0\0\x18\x01\0\0\x09\
\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x06\0\0\0\x85\0\0\0\x06\0\0\0\x95\0\0\0\0\0\
\0\0\x01\0\0\0\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x25\x64\0\x25\x63\0\x25\x63\0\x25\x78\x20\x25\x78\0\x44\x75\
\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xa4\
\x03\0\0\xa4\x03\0\0\xa8\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\
\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\
\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\
\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1d\0\0\0\0\0\0\x08\x0a\0\0\0\x23\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x30\0\0\0\x01\0\0\x04\x0c\
\0\0\0\x36\0\0\0\x0e\0\0\0\0\0\0\0\x3e\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\
\0\0\0\0\0\0\x03\0\0\0\0\x0d\0\0\0\x04\0\0\0\x0c\0\0\0\0\0\0\0\x04\0\0\x04\x20\
\0\0\0\x43\0\0\0\x01\0\0\0\0\0\0\0\x48\0\0\0\x05\0\0\0\x40\0\0\0\x54\0\0\0\x07\
\0\0\0\x80\0\0\0\x58\0\0\0\x0b\0\0\0\xc0\0\0\0\x5e\0\0\0\0\0\0\x0e\x0f\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\x02\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\
\0\0\0\x04\0\0\0\0\0\0\0\x03\0\0\x04\x18\0\0\0\x43\0\0\0\x11\0\0\0\0\0\0\0\x68\
\0\0\0\x11\0\0\0\x40\0\0\0\x71\0\0\0\x11\0\0\0\x80\0\0\0\x7c\0\0\0\0\0\0\x0e\
\x13\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\
\x83\0\0\0\x15\0\0\0\x87\0\0\0\x01\0\0\x0c\x16\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\
\0\x49\x03\0\0\x06\0\0\x04\x18\0\0\0\x50\x03\0\0\x09\0\0\0\0\0\0\0\x55\x03\0\0\
\x09\0\0\0\x20\0\0\0\x5e\x03\0\0\x09\0\0\0\x40\0\0\0\x68\x03\0\0\x09\0\0\0\x60\
\0\0\0\x78\x03\0\0\x09\0\0\0\x80\0\0\0\x87\x03\0\0\x09\0\0\0\xa0\0\0\0\0\0\0\0\
\x01\0\0\x0d\x02\0\0\0\x83\0\0\0\x18\0\0\0\x96\x03\0\0\x01\0\0\x0c\x1a\0\0\0\
\x30\x04\0\0\0\0\0\x0e\x02\0\0\0\x01\0\0\0\x36\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\x0a\x0d\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1e\0\0\0\x04\0\0\0\
\x03\0\0\0\x32\x04\0\0\0\0\0\x0e\x1f\0\0\0\0\0\0\0\x46\x04\0\0\0\0\0\x0e\x1f\0\
\0\0\0\0\0\0\x5c\x04\0\0\0\0\0\x0e\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x1e\0\0\0\x04\0\0\0\x06\0\0\0\x72\x04\0\0\0\0\0\x0e\x23\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0d\0\0\0\x04\0\0\0\x0d\0\0\0\x84\x04\0\0\0\0\0\x0e\x25\0\0\
\0\x01\0\0\0\x8c\x04\0\0\x02\0\0\x0f\0\0\0\0\x1c\0\0\0\0\0\0\0\x04\0\0\0\x1d\0\
\0\0\0\0\0\0\x0c\0\0\0\x92\x04\0\0\x02\0\0\x0f\0\0\0\0\x10\0\0\0\0\0\0\0\x20\0\
\0\0\x14\0\0\0\0\0\0\0\x18\0\0\0\x98\x04\0\0\x04\0\0\x0f\0\0\0\0\x20\0\0\0\0\0\
\0\0\x03\0\0\0\x21\0\0\0\x03\0\0\0\x03\0\0\0\x22\0\0\0\x06\0\0\0\x03\0\0\0\x24\
\0\0\0\x09\0\0\0\x06\0\0\0\xa0\x04\0\0\x01\0\0\x0f\0\0\0\0\x26\0\0\0\0\0\0\0\
\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x6d\x73\x67\x5f\x74\0\x6d\x65\x73\x73\x61\
\x67\x65\0\x63\x68\x61\x72\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\
\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x79\x5f\x63\x6f\x6e\x66\
\x69\x67\0\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\
\x7a\x65\0\x6f\x75\x74\x70\x75\x74\0\x63\x74\x78\0\x6b\x70\x72\x6f\x62\x65\x5f\
\x65\x78\x65\x63\0\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2f\x65\x78\x65\x63\x76\x65\
\0\x2f\x68\x6f\x6d\x65\x2f\x6c\x79\x6c\x64\x61\x6c\x65\x6b\x2f\x77\x6f\x72\x6b\
\x73\x70\x61\x63\x65\x2f\x61\x35\x2d\x65\x62\x70\x66\x2d\x6c\x65\x61\x72\x6e\
\x2f\x30\x78\x36\x2f\x68\x65\x6c\x6c\x6f\x2d\x76\x65\x72\x69\x66\x69\x65\x72\
\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\
\x65\x63\x28\x76\x6f\x69\x64\x20\x2a\x63\x74\x78\x29\0\x20\x20\x20\x64\x61\x74\
\x61\x2e\x63\x6f\x75\x6e\x74\x65\x72\x20\x3d\x20\x63\x3b\0\x20\x20\x20\x63\x2b\
\x2b\x3b\0\x20\x20\x20\x73\x74\x72\x75\x63\x74\x20\x64\x61\x74\x61\x5f\x74\x20\
\x64\x61\x74\x61\x20\x3d\x20\x7b\x7d\x3b\0\x20\x20\x20\x64\x61\x74\x61\x2e\x70\
\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\
\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x3b\0\x20\x20\x20\x75\x69\x64\
\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\
\x75\x69\x64\x5f\x67\x69\x64\x28\x29\x20\x26\x20\x30\x78\x46\x46\x46\x46\x46\
\x46\x46\x46\x3b\0\x20\x20\x20\x64\x61\x74\x61\x2e\x75\x69\x64\x20\x3d\x20\x75\
\x69\x64\x3b\0\x20\x20\x20\x70\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\
\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x6d\x79\x5f\x63\x6f\x6e\x66\
\x69\x67\x2c\x20\x26\x75\x69\x64\x29\x3b\0\x20\x20\x20\x69\x66\x20\x28\x70\x20\
\x21\x3d\x20\x30\x29\0\x20\x20\x20\x20\x20\x20\x63\x68\x61\x72\x20\x61\x20\x3d\
\x20\x70\x2d\x3e\x6d\x65\x73\x73\x61\x67\x65\x5b\x30\x5d\x3b\0\x20\x20\x20\x20\
\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x25\x64\x22\x2c\x20\
\x61\x29\x3b\0\x20\x20\x20\x69\x66\x20\x28\x63\x20\x3c\x20\x73\x69\x7a\x65\x6f\
\x66\x28\x6d\x65\x73\x73\x61\x67\x65\x29\x29\0\x20\x20\x20\x20\x20\x20\x63\x68\
\x61\x72\x20\x61\x20\x3d\x20\x6d\x65\x73\x73\x61\x67\x65\x5b\x63\x5d\x3b\0\x20\
\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x25\x63\
\x22\x2c\x20\x61\x29\x3b\0\x20\x20\x20\x69\x66\x20\x28\x63\x20\x3c\x20\x73\x69\
\x7a\x65\x6f\x66\x28\x64\x61\x74\x61\x2e\x6d\x65\x73\x73\x61\x67\x65\x29\x29\0\
\x20\x20\x20\x20\x20\x20\x63\x68\x61\x72\x20\x61\x20\x3d\x20\x64\x61\x74\x61\
\x2e\x6d\x65\x73\x73\x61\x67\x65\x5b\x63\x5d\x3b\0\x20\x20\x20\x62\x70\x66\x5f\
\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x26\x64\
\x61\x74\x61\x2e\x63\x6f\x6d\x6d\x61\x6e\x64\x2c\x20\x73\x69\x7a\x65\x6f\x66\
\x28\x64\x61\x74\x61\x2e\x63\x6f\x6d\x6d\x61\x6e\x64\x29\x29\x3b\0\x20\x20\x20\
\x62\x70\x66\x5f\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\x5f\x6f\x75\x74\x70\
\x75\x74\x28\x63\x74\x78\x2c\x20\x26\x6f\x75\x74\x70\x75\x74\x2c\x20\x42\x50\
\x46\x5f\x46\x5f\x43\x55\x52\x52\x45\x4e\x54\x5f\x43\x50\x55\x2c\x20\x26\x64\
\x61\x74\x61\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x64\x61\x74\x61\x29\x29\x3b\0\
\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x78\x64\x70\x5f\x6d\x64\0\
\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\
\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\
\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\
\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x78\x64\x70\x5f\x68\x65\x6c\x6c\x6f\0\
\x78\x64\x70\0\x30\x3a\x31\0\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\
\x61\x5f\x65\x6e\x64\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\
\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x30\x3a\
\x30\0\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\
\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\
\x74\x61\x3b\0\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x25\
\x78\x20\x25\x78\x22\x2c\x20\x64\x61\x74\x61\x2c\x20\x64\x61\x74\x61\x5f\x65\
\x6e\x64\x29\x3b\0\x7d\0\x63\0\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\
\x63\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x32\0\x78\x64\x70\x5f\x68\x65\x6c\x6c\
\x6f\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x64\
\x61\x74\x61\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x34\x02\
\0\0\x58\x02\0\0\x2c\0\0\0\x08\0\0\0\x93\0\0\0\x01\0\0\0\0\0\0\0\x17\0\0\0\xa0\
\x03\0\0\x01\0\0\0\0\0\0\0\x1b\0\0\0\x10\0\0\0\x93\0\0\0\x1e\0\0\0\0\0\0\0\xa3\
\0\0\0\xe3\0\0\0\0\x68\0\0\x08\0\0\0\xa3\0\0\0\xfe\0\0\0\x13\x80\0\0\x20\0\0\0\
\xa3\0\0\0\x13\x01\0\0\x05\x84\0\0\x40\0\0\0\xa3\0\0\0\x1b\x01\0\0\x12\x70\0\0\
\x78\0\0\0\xa3\0\0\0\xfe\0\0\0\x11\x80\0\0\x80\0\0\0\xa3\0\0\0\x37\x01\0\0\x0f\
\x8c\0\0\x88\0\0\0\xa3\0\0\0\x37\x01\0\0\x0d\x8c\0\0\x90\0\0\0\xa3\0\0\0\x61\
\x01\0\0\x0a\x90\0\0\x98\0\0\0\xa3\0\0\0\x92\x01\0\0\x0d\x94\0\0\xa0\0\0\0\xa3\
\0\0\0\x61\x01\0\0\x24\x90\0\0\xb0\0\0\0\xa3\0\0\0\x61\x01\0\0\x08\x90\0\0\xc0\
\0\0\0\xa3\0\0\0\0\0\0\0\0\0\0\0\xc8\0\0\0\xa3\0\0\0\xa5\x01\0\0\x08\x9c\0\0\
\xf0\0\0\0\xa3\0\0\0\xd3\x01\0\0\x08\xb0\0\0\xf8\0\0\0\xa3\0\0\0\xe2\x01\0\0\
\x10\xb8\0\0\x10\x01\0\0\xa3\0\0\0\0\x02\0\0\x07\xbc\0\0\x40\x01\0\0\xa3\0\0\0\
\0\0\0\0\0\0\0\0\x60\x01\0\0\xa3\0\0\0\x1b\x02\0\0\x08\xf8\0\0\x68\x01\0\0\xa3\
\0\0\0\x1b\x02\0\0\x08\xf8\0\0\x70\x01\0\0\xa3\0\0\0\x37\x02\0\0\x10\0\x01\0\
\xa0\x01\0\0\xa3\0\0\0\x52\x02\0\0\x07\x04\x01\0\xc0\x01\0\0\xa3\0\0\0\x6d\x02\
\0\0\x08\x1c\x01\0\xd8\x01\0\0\xa3\0\0\0\x6d\x02\0\0\x08\x1c\x01\0\xe8\x01\0\0\
\xa3\0\0\0\x8e\x02\0\0\x10\x24\x01\0\x10\x02\0\0\xa3\0\0\0\x52\x02\0\0\x07\x28\
\x01\0\x30\x02\0\0\xa3\0\0\0\xae\x02\0\0\x1f\x34\x01\0\x40\x02\0\0\xa3\0\0\0\
\xae\x02\0\0\x04\x34\x01\0\x58\x02\0\0\xa3\0\0\0\xae\x02\0\0\x1f\x34\x01\0\x60\
\x02\0\0\xa3\0\0\0\xec\x02\0\0\x04\x38\x01\0\x98\x02\0\0\xa3\0\0\0\x3c\x03\0\0\
\x04\x40\x01\0\xa0\x03\0\0\x04\0\0\0\0\0\0\0\xa3\0\0\0\xa8\x03\0\0\x28\x5c\x01\
\0\x08\0\0\0\xa3\0\0\0\xdd\x03\0\0\x24\x58\x01\0\x10\0\0\0\xa3\0\0\0\x06\x04\0\
\0\x04\xa4\x01\0\x30\0\0\0\xa3\0\0\0\x2e\x04\0\0\x01\xac\x01\0\x10\0\0\0\xa0\
\x03\0\0\x02\0\0\0\0\0\0\0\x19\0\0\0\xa4\x03\0\0\0\0\0\0\x08\0\0\0\x19\0\0\0\
\xd9\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd7\0\0\0\0\0\x03\0\x40\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2d\0\0\0\x01\0\x09\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\0\0\0\xd0\0\0\0\0\0\x03\0\x30\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf4\0\0\0\x01\0\
\x09\0\x03\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\xde\0\0\0\x01\0\x09\0\x06\0\0\0\0\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\
\0\0\0\x01\0\x09\0\x09\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xa8\x02\0\0\
\0\0\0\0\x9f\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x67\0\0\0\x11\
\0\x08\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x8d\0\0\0\x11\0\x07\0\x04\0\0\0\0\0\
\0\0\x0c\0\0\0\0\0\0\0\x14\0\0\0\x11\0\x08\0\x20\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\
\0\x4f\0\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\xc8\0\0\0\x11\0\x0a\
\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\0\xc8\
\0\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\xe0\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x10\
\x01\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x70\x01\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\xa0\x01\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\xc0\x01\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\
\0\x10\x02\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x68\x02\0\0\0\0\0\0\x01\0\0\0\x0e\0\
\0\0\x10\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x30\x03\0\0\0\0\0\0\x04\0\0\0\x0b\0\
\0\0\x3c\x03\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\0\x54\x03\0\0\0\0\0\0\x04\0\0\0\x0c\
\0\0\0\x60\x03\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x78\x03\0\0\0\0\0\0\x03\0\0\0\
\x09\0\0\0\x84\x03\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x90\x03\0\0\0\0\0\0\x03\0\0\
\0\x09\0\0\0\x9c\x03\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\xb4\x03\0\0\0\0\0\0\x04\0\
\0\0\x10\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x3c\0\0\0\0\0\0\0\x04\0\0\
\0\x07\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x20\x01\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x30\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\x01\0\0\0\0\0\0\x04\0\
\0\0\x01\0\0\0\x50\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\x01\0\0\0\0\0\0\x04\
\0\0\0\x01\0\0\0\x70\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\x01\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x90\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\x01\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\xb0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\x01\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\xd0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\x01\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\xf0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\x02\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\x10\x02\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x20\x02\0\0\
\0\0\0\0\x04\0\0\0\x01\0\0\0\x38\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x48\x02\0\
\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x58\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x68\x02\
\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x84\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x94\
\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x14\x19\x17\x16\x04\x06\x07\x18\x09\x1a\0\
\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x6f\
\x75\x74\x70\x75\x74\0\x78\x64\x70\x5f\x68\x65\x6c\x6c\x6f\x2e\x5f\x5f\x5f\x5f\
\x66\x6d\x74\0\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\x2e\x5f\x5f\x5f\x5f\
\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x65\x6c\x78\x64\x70\0\x78\x64\x70\
\x5f\x68\x65\x6c\x6c\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\
\0\x6d\x79\x5f\x63\x6f\x6e\x66\x69\x67\0\x2e\x72\x65\x6c\x6b\x73\x79\x73\x63\
\x61\x6c\x6c\x2f\x65\x78\x65\x63\x76\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6d\
\x65\x73\x73\x61\x67\x65\0\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\0\x2e\
\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\
\x74\x61\0\x2e\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x35\0\x4c\x42\x42\x30\x5f\x32\0\x6b\x70\
\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x32\0\
\x6b\x70\x72\x6f\x62\x65\x5f\x65\x78\x65\x63\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\
\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa1\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc2\x13\0\0\0\0\0\0\x0a\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x75\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xa8\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x71\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x28\x10\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x10\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x4b\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\
\x02\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x47\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x10\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x10\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\xb9\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x03\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x41\0\0\0\x01\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x03\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb1\0\0\0\x01\0\0\0\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x03\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x77\x03\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc3\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\
\x03\0\0\0\0\0\0\x64\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xbf\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x10\0\0\0\0\
\0\0\x90\0\0\0\0\0\0\0\x10\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0b\0\0\0\0\0\0\xa4\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x11\0\0\0\0\0\0\x60\x02\0\0\0\
\0\0\0\x10\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x59\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x13\0\0\0\0\0\0\x0a\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa9\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x0e\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\x01\0\0\
\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct hello_verifier_bpf *hello_verifier_bpf::open(const struct bpf_object_open_opts *opts) { return hello_verifier_bpf__open_opts(opts); }
struct hello_verifier_bpf *hello_verifier_bpf::open_and_load() { return hello_verifier_bpf__open_and_load(); }
int hello_verifier_bpf::load(struct hello_verifier_bpf *skel) { return hello_verifier_bpf__load(skel); }
int hello_verifier_bpf::attach(struct hello_verifier_bpf *skel) { return hello_verifier_bpf__attach(skel); }
void hello_verifier_bpf::detach(struct hello_verifier_bpf *skel) { hello_verifier_bpf__detach(skel); }
void hello_verifier_bpf::destroy(struct hello_verifier_bpf *skel) { hello_verifier_bpf__destroy(skel); }
const void *hello_verifier_bpf::elf_bytes(size_t *sz) { return hello_verifier_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
hello_verifier_bpf__assert(struct hello_verifier_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->data->c) == 4, "unexpected size of 'c'");
	_Static_assert(sizeof(s->data->message) == 12, "unexpected size of 'message'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __HELLO_VERIFIER_BPF_SKEL_H__ */
